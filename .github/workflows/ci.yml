# CI workflow using Fastlane for Flutter project
# This workflow runs tests, builds APK/AAB for Android and iOS app
name: CI with Fastlane

# Define when this workflow should be triggered
on:
  push:
    branches: [main, develop] # Run on push to main or develop branches
  pull_request:
    branches: [main, develop] # Run on PRs targeting main or develop branches
  workflow_dispatch: # Allow manual trigger
    inputs:
      flutter_version:
        description: "Flutter version to use (overrides default)"
        required: false
        default: "3.35.4"

env:
  FLUTTER_VERSION: "3.35.4" # Default Flutter version (can be overridden via workflow input)

jobs:
  build-ios-dev:
    name: build-ios-dev
    runs-on: macos-latest # iOS builds require macOS runner
    # needs: test # Only run after test job passes

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      # Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Determine Flutter version: prefer manual input, fallback to env default

      - name: Restore Flutter SDK cache
        id: flutter_sdk_cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-sdk-${{ env.FLUTTER_VERSION }}-${{ runner.arch }}

      # 2) Install Flutter ONLY if cache missed
      - name: Setup Flutter (cold cache)
        if: steps.flutter_sdk_cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: false # weâ€™re managing cache manually here

      # 3) Save SDK to cache for next runs (only when it was a miss)
      - name: Save Flutter SDK cache
        if: steps.flutter_sdk_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/hostedtoolcache/flutter
          key: ${{ steps.flutter_sdk_cache.outputs.cache-primary-key }}

      # 4) Cache pub + build artifacts (optional but recommended)
      - name: Cache pub & build
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool
            **/build
          key: ${{ runner.os }}-pub-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-${{ env.FLUTTER_VERSION }}-

      # Setup Ruby for Fastlane
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true

      # Fastlane gems are installed and cached by ruby/setup-ruby (bundler-cache: true)

      # Run full CI pipeline for iOS (deps, analyze, test, build)
      - name: Build iOS dev with Fastlane
        run: bundle exec fastlane ios build_dev

      # Upload iOS app bundle as build artifact
      # - name: Upload iOS artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ios-release-${{ github.sha }} # Unique name with commit SHA
      #     path: build/ios/iphoneos/Runner.app # iOS app bundle location
