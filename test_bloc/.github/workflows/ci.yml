# CI workflow using Fastlane for Flutter project
# This workflow runs tests, builds APK/AAB for Android and iOS app
name: CI with Fastlane

# Define Flutter version constant for easy management
env:
  FLUTTER_VERSION: '3.35.4'

# Define when this workflow should be triggered
on:
  push:
    branches: [ main, develop ]  # Run on push to main or develop branches
  pull_request:
    branches: [ main, develop ]  # Run on PRs targeting main or develop branches

jobs:
  # Test job - runs Flutter tests, analysis, and code formatting checks
  test:
    name: Test with Fastlane
    runs-on: ubuntu-latest  # Use Ubuntu runner (free tier)
    
    # Matrix strategy allows testing on multiple Flutter versions
    strategy:
      matrix:
        flutter-version: ['${{ env.FLUTTER_VERSION }}']  # Use Flutter version from env constant
    
    steps:
    # Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Setup Java 17 for Android builds
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'  # Use Zulu OpenJDK distribution
        java-version: '17'    # Java 17 is required for modern Android builds
        
    # Setup Ruby for Fastlane
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'      # Use Ruby 3.3 (stable with Fastlane)
        bundler-cache: true      # Cache Ruby gems for faster builds
        
    # Setup Flutter SDK
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ matrix.flutter-version }}  # Use version from matrix
        channel: 'stable'        # Use stable channel
        cache: true             # Cache Flutter dependencies
      
    # Install Fastlane and verify installation
    - name: Install Fastlane
      run: |
        bundle install                    # Install Ruby gems from Gemfile
        bundle exec fastlane --version    # Verify Fastlane is working
      
    # Check code formatting (fail if code is not properly formatted)
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    # Run full CI pipeline using Fastlane (deps, analyze, test, build)
    - name: Run Fastlane CI for Android
      run: bundle exec fastlane android ci
      
    # Upload test coverage to Codecov for analysis
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info          # Coverage file generated by Flutter test
        flags: unittests                  # Tag this coverage as unit tests
        name: codecov-umbrella            # Name for the coverage report
        fail_ci_if_error: false          # Don't fail CI if Codecov upload fails

  # Build job for Android - creates APK and AAB files
  # build-android:
  #   name: Build Android with Fastlane
  #   runs-on: ubuntu-latest
  #   needs: test  # Only run after test job passes
    
  #   steps:
  #   # Checkout the repository code
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
      
  #   # Setup Java 17 for Android builds
  #   - name: Setup Java
  #     uses: actions/setup-java@v4
  #     with:
  #       distribution: 'zulu'
  #       java-version: '17'
        
  #   # Setup Ruby for Fastlane
  #   - name: Setup Ruby
  #     uses: ruby/setup-ruby@v1
  #     with:
  #       ruby-version: '3.3'
  #       bundler-cache: true
        
  #   # Setup Flutter SDK
  #   - name: Setup Flutter
  #     uses: subosito/flutter-action@v2
  #     with:
  #       flutter-version: ${{ env.FLUTTER_VERSION }}  # Use Flutter version from env constant
  #       channel: 'stable'
  #       cache: true
        
  #   # Install Fastlane dependencies
  #   - name: Install Fastlane
  #     run: bundle install
      
  #   # Build APK (Android Package) for distribution
  #   - name: Build APK with Fastlane
  #     run: bundle exec fastlane android build_apk
      
  #   # Build AAB (Android App Bundle) for Google Play Store
  #   - name: Build AAB with Fastlane
  #     run: bundle exec fastlane android build_aab
      
  #   # Upload APK as build artifact for download
  #   - name: Upload APK artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: app-release-${{ github.sha }}  # Unique name with commit SHA
  #       path: build/app/outputs/flutter-apk/app-release.apk
        
  #   # Upload AAB as build artifact for Google Play Store
  #   - name: Upload AAB artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: app-bundle-${{ github.sha }}   # Unique name with commit SHA
  #       path: build/app/outputs/bundle/release/app-release.aab

  # Build job for iOS - creates iOS app bundle
  build-ios:
    name: Build iOS with Fastlane
    runs-on: macos-latest  # iOS builds require macOS runner
    needs: test  # Only run after test job passes
    
    steps:
    # Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Setup Ruby for Fastlane
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
      
    # Setup Flutter SDK
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}  # Use Flutter version from env constant
        channel: 'stable'
        cache: true
        
    # Install Fastlane dependencies
    - name: Install Fastlane
      run: bundle install
      
    # Run full CI pipeline for iOS (deps, analyze, test, build)
    - name: Build iOS with Fastlane
      run: bundle exec fastlane ios ci
      
    # Upload iOS app bundle as build artifact
    - name: Upload iOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-release-${{ github.sha }}  # Unique name with commit SHA
        path: build/ios/iphoneos/Runner.app  # iOS app bundle location
